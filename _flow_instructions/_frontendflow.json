{
  "project": {
    "name": "CertiChain",
    "studio": "NKD Studio",
    "version": "v1.0.0",
    "date": "2025-10-23",
    "description": "CertiChain l√† h·ªá th·ªëng x√°c th·ª±c ch·ª©ng ch·ªâ d·ª±a tr√™n blockchain, k·∫øt h·ª£p IPFS ƒë·ªÉ l∆∞u tr·ªØ v√† Base Sepolia ƒë·ªÉ x√°c minh. D·ª± √°n g·ªìm dashboard qu·∫£n tr·ªã cho nh√† tr∆∞·ªùng, giao di·ªán ng∆∞·ªùi d√πng cho sinh vi√™n, v√† trang x√°c minh c√¥ng khai cho nh√† tuy·ªÉn d·ª•ng.",
    "objective": {
      "issuer": "Cung c·∫•p giao di·ªán cho Nh√† tr∆∞·ªùng ƒë·ªÉ upload, t·∫°o, ƒëƒÉng k√Ω ch·ª©ng ch·ªâ on-chain",
      "holder": "Cung c·∫•p giao di·ªán c√¥ng khai cho Sinh vi√™n ƒë·ªÉ xem & chia s·∫ª ch·ª©ng ch·ªâ",
      "verifier": "Cung c·∫•p trang x√°c minh cho Nh√† tuy·ªÉn d·ª•ng ƒë·ªÉ qu√©t QR / x√°c th·ª±c ch·ª©ng ch·ªâ"
    },
    "architecture": "Frontend th√¥ng minh nh∆∞ng nh·∫π ‚Äî k·∫øt n·ªëi tr·ª±c ti·∫øp c·∫£ API backend v√† smart contract th√¥ng qua wagmi + ethers.js"
  },
  "techStack": {
    "framework": "Next.js 15 (App Router)",
    "ui": "Tailwind CSS + shadcn/ui + QRCode.react",
    "state": "React Query (TanStack Query) + Zustand",
    "wallet": "wagmi + MetaMask + Base Sepolia",
    "api": "Axios + native fetch",
    "blockchain": "ethers.js (via wagmi hooks)",
    "storage": "web3.storage (th√¥ng qua backend)",
    "database": "Prisma ORM",
    "routing": "App Router (/app/*)",
    "deploy": "Vercel"
  },
  "structure": {
    "src": {
      "app": [
        "page.tsx",
        "layout.tsx",
        "globals.css",
        "dashboard/page.tsx",
        "certificates/create/page.tsx",
        "certificates/[id]/page.tsx",
        "verify/[hash]/page.tsx"
      ],
      "components": [
        "CertificateForm.tsx",
        "CertificateCard.tsx",
        "CertificateList.tsx",
        "VerifyResult.tsx",
        "QRDisplay.tsx",
        "Header.tsx",
        "Footer.tsx"
      ],
      "hooks": [
        "useCertificates.ts",
        "useUpload.ts",
        "useVerify.ts",
        "useBlockchain.ts"
      ],
      "lib": [
        "api.ts",
        "wagmiConfig.ts",
        "utils.ts"
      ],
      "state": [
        "ui.ts",
        "data.ts"
      ],
      "types": [
        "certificate.ts",
        "user.ts"
      ]
    },
    "public": [
      "logo.png"
    ]
  },
  "actors": [
    {
      "name": "üè´ Nh√† tr∆∞·ªùng (Issuer)",
      "routes": ["/dashboard", "/certificates/create"],
      "description": "T·∫°o ch·ª©ng ch·ªâ, upload, ghi on-chain"
    },
    {
      "name": "üë©‚Äçüéì Sinh vi√™n (Holder)",
      "routes": ["/certificates/[id]"],
      "description": "Xem chi ti·∫øt, copy link, QR"
    },
    {
      "name": "üè¢ Nh√† tuy·ªÉn d·ª•ng (Verifier)",
      "routes": ["/verify/[hash]"],
      "description": "Qu√©t QR / verify hash tr·ª±c ti·∫øp"
    }
  ],
  "frontend": {
    "routes": [
      {
        "path": "/",
        "component": "LandingPage",
        "role": "Public",
        "description": "Gi·ªõi thi·ªáu h·ªá th·ªëng"
      },
      {
        "path": "/dashboard",
        "component": "DashboardPage",
        "role": "Issuer",
        "description": "Danh s√°ch ch·ª©ng ch·ªâ, qu·∫£n l√Ω"
      },
      {
        "path": "/certificates/create",
        "component": "CreateCertificatePage",
        "role": "Issuer",
        "description": "T·∫°o ch·ª©ng ch·ªâ, upload"
      },
      {
        "path": "/certificates/[id]",
        "component": "CertificateDetailPage",
        "role": "Holder",
        "description": "Xem v√† copy link"
      },
      {
        "path": "/verify/[hash]",
        "component": "VerifyPage",
        "role": "Public",
        "description": "X√°c minh ch·ª©ng ch·ªâ"
      }
    ],
    "states": [
      "walletConnected",
      "uploadStatus",
      "verificationResult",
      "certList",
      "userRole"
    ],
    "api_endpoints": [
      {
        "name": "createCertificate",
        "method": "POST",
        "path": "/api/certificates",
        "description": "T·∫°o ch·ª©ng ch·ªâ m·ªõi, upload IPFS, l∆∞u hash"
      },
      {
        "name": "getCertificates",
        "method": "GET",
        "path": "/api/certificates",
        "description": "L·∫•y danh s√°ch ch·ª©ng ch·ªâ c·ªßa nh√† tr∆∞·ªùng"
      },
      {
        "name": "getCertificateDetail",
        "method": "GET",
        "path": "/api/certificates/[id]",
        "description": "L·∫•y chi ti·∫øt ch·ª©ng ch·ªâ"
      },
      {
        "name": "registerOnChain",
        "method": "POST",
        "path": "/api/certificates/register",
        "description": "Ghi ch·ª©ng ch·ªâ l√™n blockchain, t·∫°o transaction"
      },
      {
        "name": "verifyCertificate",
        "method": "GET",
        "path": "/api/certificates/verify",
        "description": "X√°c minh ch·ª©ng ch·ªâ d·ª±a tr√™n hash"
      }
    ],
    "data_flows": [
      "User selects certificate file ‚Üí UploadForm ‚Üí IPFS ‚Üí returns hash",
      "Hash + metadata ‚Üí Smart Contract write ‚Üí transaction success ‚Üí update UI state",
      "Verifier inputs hash ‚Üí VerifyPanel ‚Üí fetch contract data ‚Üí display verification result",
      "Create Certificate Flow: Form submission ‚Üí API POST /api/certificates ‚Üí IPFS upload ‚Üí returns hash ‚Üí show preview ‚Üí Register button",
      "Dashboard Flow: API GET /api/certificates ‚Üí render CertificateList ‚Üí filter by status (pending/verified) ‚Üí Register on-chain action",
      "Certificate Detail Flow: API GET /api/certificates/[id] ‚Üí show student info + QR code ‚Üí copy link/share options",
      "Verify Flow: API GET /api/certificates/verify?hash=... ‚Üí show verification result + issuer + date + IPFS/BaseScan links"
    ],
    "integration": {
      "wagmi": {
        "used_hooks": [
          "useAccount",
          "useContractWrite",
          "useContractRead"
        ],
        "network": "Base Sepolia Testnet",
        "config_file": "src/lib/wagmiConfig.ts"
      },
      "ipfs": {
        "provider": "Infura",
        "methods": [
          "uploadFile",
          "getFile"
        ],
        "returns": "IPFS hash (CID)"
      }
    },
    "ui_components": [
      {
        "name": "CertificateForm",
        "description": "Form upload, nh·∫≠p th√¥ng tin ch·ª©ng ch·ªâ",
        "props": ["onSubmit"]
      },
      {
        "name": "CertificateList",
        "description": "Danh s√°ch ch·ª©ng ch·ªâ (table ho·∫∑c grid)",
        "props": ["certificates[]"]
      },
      {
        "name": "CertificateCard",
        "description": "Th·∫ª hi·ªÉn th·ªã ch·ª©ng ch·ªâ ri√™ng",
        "props": ["certificate"]
      },
      {
        "name": "QRDisplay",
        "description": "T·∫°o m√£ QR cho link verify",
        "props": ["value"]
      },
      {
        "name": "VerifyResult",
        "description": "Hi·ªÉn th·ªã k·∫øt qu·∫£ x√°c th·ª±c on-chain",
        "props": ["data"]
      }
    ],
    "react_query_hooks": [
      {
        "name": "useCertificates",
        "functionality": "L·∫•y danh s√°ch ch·ª©ng ch·ªâ",
        "api": "GET /api/certificates"
      },
      {
        "name": "useCreateCertificate",
        "functionality": "T·∫°o ch·ª©ng ch·ªâ m·ªõi",
        "api": "POST /api/certificates"
      },
      {
        "name": "useRegisterCertificate",
        "functionality": "Ghi l√™n blockchain",
        "api": "POST /api/certificates/register"
      },
      {
        "name": "useVerify",
        "functionality": "X√°c minh ch·ª©ng ch·ªâ",
        "api": "GET /api/certificates/verify?hash=..."
      }
    ],
    "ui_logic": [
      "N·∫øu wallet ch∆∞a k·∫øt n·ªëi ‚Üí hi·ªán n√∫t Connect Wallet",
      "Khi upload th√†nh c√¥ng ‚Üí hi·ªÉn th·ªã hash + n√∫t Verify",
      "N·∫øu verify th√†nh c√¥ng ‚Üí hi·ªán badge 'Verified on-chain'"
    ]
  },
  "ux_states": [
    "Idle",
    "Uploading",
    "UploadSuccess",
    "Verifying",
    "Verified",
    "Error"
  ],
  "frontend_flows": {
    "create_certificate": {
      "path": "/certificates/create",
      "role": "Issuer",
      "steps": [
        "Form nh·∫≠p: T√™n sinh vi√™n, M√£ sinh vi√™n, T√™n kh√≥a h·ªçc",
        "Upload file PDF (Drag & Drop)",
        "Khi nh·∫•n 'T·∫°o ch·ª©ng ch·ªâ' ‚Üí g·ªçi API POST /api/certificates",
        "Hi·ªÉn th·ªã tr·∫°ng th√°i 'ƒêang upload‚Ä¶'",
        "API tr·∫£ v·ªÅ ‚Üí hi·ªÉn th·ªã preview + n√∫t 'Ghi l√™n blockchain'",
        "Hi·ªÉn th·ªã: ‚úÖ Certificate created (pending on-chain), File Hash: 0x123abc..."
      ],
      "hooks": ["useCreateCertificate", "useMutation"]
    },
    "dashboard": {
      "path": "/dashboard",
      "role": "Issuer",
      "steps": [
        "FE g·ªçi API GET /api/certificates",
        "Hi·ªÉn th·ªã danh s√°ch: H·ªç t√™n, T√™n kh√≥a h·ªçc, Ng√†y c·∫•p, Tr·∫°ng th√°i (pending/verified)",
        "N√∫t 'ƒêƒÉng k√Ω on-chain' (n·∫øu pending)",
        "Khi b·∫•m: FE g·ªçi POST /api/certificates/register v·ªõi certificateId",
        "BE g·ªçi smart contract ‚Üí c·∫≠p nh·∫≠t tr·∫°ng th√°i ‚Üí FE refetch list"
      ],
      "hooks": ["useCertificates", "useQuery", "useRegisterCertificate"]
    },
    "register_blockchain": {
      "path": "Dashboard ho·∫∑c Certificate Detail",
      "role": "Issuer",
      "steps": [
        "User k·∫øt n·ªëi MetaMask (wagmi hook useAccount)",
        "FE hi·ªÉn th·ªã v√≠ nh√† tr∆∞·ªùng ƒëang d√πng",
        "Khi nh·∫•n 'Register on-chain': g·ªçi API /api/certificates/register ‚Üí tr·∫£ txHash",
        "Hi·ªÉn th·ªã toast: üü¢ Registered on Blockchain! Tx: 0xabc123... (View on BaseScan)"
      ],
      "hooks": ["useAccount", "useWriteContract", "useBlockchain"]
    },
    "certificate_detail": {
      "path": "/certificates/[id]",
      "role": "Holder",
      "steps": [
        "G·ªçi API GET /api/certificates/[id]",
        "Hi·ªÉn th·ªã: Th√¥ng tin sinh vi√™n, kh√≥a h·ªçc, hash",
        "N√∫t 'Sao ch√©p link' ‚Üí copy ƒë∆∞·ªùng d·∫´n https://verify.edu.vn/verify/<hash>",
        "N√∫t 'T·∫£i QR Code' ‚Üí l∆∞u ·∫£nh QR t·ª´ component QRCode.react",
        "Component: <QRCode value={`https://verify.edu.vn/verify/${fileHash}`} size={180} />"
      ],
      "hooks": ["useQuery"]
    },
    "verify_certificate": {
      "path": "/verify/[hash]",
      "role": "Verifier",
      "steps": [
        "Khi m·ªü trang ‚Üí FE g·ªçi API GET /api/certificates/verify?hash=...",
        "Hi·ªÉn th·ªã: Hash, Tr·∫°ng th√°i (‚úÖ Verified / ‚ùå Not Found), Issuer, Ng√†y c·∫•p",
        "N√∫t 'Xem ch·ª©ng ch·ªâ tr√™n IPFS' ‚Üí https://ipfs.io/ipfs/Qm123...",
        "N√∫t 'Xem giao d·ªãch tr√™n BaseScan' ‚Üí https://basescan.org/tx/0xabc...",
        "Component: {data.verified ? <VerifiedBadge /> : <UnverifiedAlert />}"
      ],
      "hooks": ["useVerify", "useQuery"]
    }
  },
  "react_query_mapping": {
    "useCertificates": {
      "functionality": "L·∫•y danh s√°ch ch·ª©ng ch·ªâ",
      "api": "GET /api/certificates"
    },
    "useCreateCertificate": {
      "functionality": "T·∫°o ch·ª©ng ch·ªâ m·ªõi",
      "api": "POST /api/certificates"
    },
    "useRegisterCertificate": {
      "functionality": "Ghi l√™n blockchain",
      "api": "POST /api/certificates/register"
    },
    "useVerify": {
      "functionality": "X√°c minh ch·ª©ng ch·ªâ",
      "api": "GET /api/certificates/verify?hash=..."
    }
  },
  "wagmi_integration": {
    "config_file": "src/lib/wagmiConfig.ts",
    "example": "import { createConfig, http } from 'wagmi'; import { baseSepolia } from 'wagmi/chains'; import { metaMask } from 'wagmi/connectors'; export const config = createConfig({ chains: [baseSepolia], connectors: [metaMask()], transports: { [baseSepolia.id]: http('https://base-sepolia.g.alchemy.com/v2/yourKey') } });",
    "hooks_usage": ["useAccount()", "useWriteContract()", "useContractRead()"]
  },
  "ui_state_flow": [
    "[Upload] ‚Üí 'ƒêang x·ª≠ l√Ω hash & IPFS' ‚Üí 'ƒê√£ t·∫°o (pending)'",
    "[Register] ‚Üí 'ƒêang g·ª≠i giao d·ªãch' ‚Üí 'ƒê√£ verified ‚úÖ'",
    "[Share link/QR] ‚Üí 'Copied ‚úÖ'",
    "[Verifier] ‚Üí 'Verified ‚úÖ / Invalid ‚ùå'"
  ],
  "notes": "File n√†y gi√∫p Agent hi·ªÉu to√†n b·ªô flow frontend CertiChain ƒë·ªÉ t·ª± tri·ªÉn khai UI, k·∫øt n·ªëi IPFS v√† Base chain. M·ªçi th√†nh ph·∫ßn ƒë·ªÅu t·ªëi ∆∞u cho Next.js + wagmi + TypeScript. B·ªï sung ƒë·∫ßy ƒë·ªß: Tech Stack chi ti·∫øt, 3 actors (Issuer/Holder/Verifier), 5 routes ch√≠nh, React Query hooks, Wagmi integration, UX state flow, v√† Frontend flows chi ti·∫øt cho t·ª´ng m√†n h√¨nh."
}